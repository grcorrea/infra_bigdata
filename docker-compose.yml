version: "3"

networks:
  infra:
    driver: bridge

services:
  minio:
    restart: always
    hostname: minio
    container_name: minio
    image: grcorrea/minio
    ports:
      - "9050:9000"
      - "9051:9001"
    volumes:
      - ./minio/data1:/data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ACCESS_KEY: datalake
      MINIO_SECRET_KEY: datalake
    networks:
      - infra
    command: server --console-address ":9001" /data

  spark-master:
    restart: always
    image: grcorrea/spark-master
    hostname: spark-master
    networks:
      - infra
    container_name: spark-master
    command: 
      - /bin/sh
      - -c
      - |
        /usr/local/spark/sbin/start-master.sh
        start-notebook.sh --NotebookApp.token=''
    ports:
      - 8889:8888
      - 4040:4040
      - 4041:4041
      - 4042:4042
      - 4043:4043
      - 8180:8080
      - 7077:7077
    volumes:
      - ./spark/util:/util/
      - ./spark/work:/home/user 
      - ./spark/env:/env 
      - ./scripts:/scripts
    deploy:
      resources:
        limits:
          memory: 500m

  spark-worker:
    restart: always
    image: grcorrea/spark-master
    hostname: spark-worker
    networks:
      - infra
    container_name: spark-worker
    command: 
      - /bin/sh
      - -c
      - |
        /usr/local/spark/sbin/start-worker.sh spark-master:7077
        start-notebook.sh --NotebookApp.token='' 
    env_file:
      - ./spark/env/jupyter.env
    ports:
      - 5040:4040
      - 5041:4041
      - 5042:4042
      - 5043:4043
      - 8881:8081
      - 36533:36533
    volumes:
      - ./spark/util:/util/
      - ./spark/work:/home/user 
      - ./scripts:/scripts
    environment:
      SPARK_MASTER: spark-master
    depends_on:
        - spark-master
    deploy:
      resources:
        limits:
          memory: 1g
  
  metastore:
    restart: always
    hostname: metastore
    networks:
      - infra
    image: grcorrea/metastore
    container_name: metastore
    environment:
      AWS_ACCESS_KEY_ID: datalake
      AWS_SECRET_ACCESS_KEY: datalake
    volumes:
      - ./trino/conf/core-site.xml:/opt/hadoop/etc/hadoop/core-site.xml:ro

  trino:
    restart: always
    image: grcorrea/trino
    container_name: trino
    hostname: trino
    networks:
      - infra
    ports: 
      - "8080:8080" 
    depends_on:
      - postgres
      - metastore
    volumes: 
      - ./trino/catalog:/etc/trino/catalog  
      - ./trino/conf:/conf
      - ./scripts:/scripts

  postgres:
    restart: always
    image: grcorrea/postgres
    container_name: postgres
    hostname: postgres
    networks:
      - infra
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: admin 
    ports:
      - 5442:5432
    volumes:
      - ./postgres/postgres-db-volume:/var/lib/postgresql/data
      - ./postgres:/util
      - ./scripts:/scripts

  redis:
    restart: always
    image: grcorrea/redis
    container_name: redis
    hostname: redis
    networks:
      - infra
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50